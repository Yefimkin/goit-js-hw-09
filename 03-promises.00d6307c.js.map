{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,gBACnCC,UAAWF,SAASC,cAAc,eAClCE,YAAaH,SAASC,cAAc,iBACpCG,UAAWJ,SAASC,cAAc,WA8BpC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,SAAUA,EAAUC,MAAOA,IAErCM,EAAO,CAAEP,SAAUA,EAAUC,MAAOA,MAErCA,MArCPT,EAAKM,UAAUW,iBAAiB,SAEhC,SAAqBC,GACjBA,EAAMC,iBASV,SAA4BC,GAE1B,I,IAF4BC,EAAFD,EAAEX,MAAOa,EAATF,EAASE,KAAMC,EAAfH,EAAeG,OACrCC,EAAkBH,EACbI,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChClB,EAAckB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBmB,EAAA9B,GAAS+B,OAAOC,QAAQ,qBAAoCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,UAEvEuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAA9B,GAAS+B,OAAOI,QAAQ,oBAAmCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,UAEjEe,GAAmBF,EAbrBY,CALa,CACXzB,MAAO0B,SAASnC,EAAKC,WAAWmC,OAChCd,KAAMa,SAASnC,EAAKI,UAAUgC,OAC9Bb,OAAQY,SAASnC,EAAKK,YAAY+B,Y","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayInput: document.querySelector('[name=delay]'),\n  stepInput: document.querySelector('[name=step]'),\n  amountInput: document.querySelector('[name=amount]'),\n  submitBtn: document.querySelector('button'),\n}\n\nrefs.submitBtn.addEventListener('click', onSubmitBtn);\n\nfunction onSubmitBtn(event) {\n    event.preventDefault();\n  const data = {\n    delay: parseInt(refs.delayInput.value),\n    step: parseInt(refs.stepInput.value),\n    amount: parseInt(refs.amountInput.value),\n  }\n  newPromiseCreation(data);\n}\n\nfunction newPromiseCreation({ delay, step, amount }) {\n  let calculatedDelay = delay;\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, calculatedDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  });\n    calculatedDelay += step;\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n    \n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","delayInput","document","querySelector","stepInput","amountInput","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","param1","delay1","step","amount","calculatedDelay","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$newPromiseCreation","parseInt","value"],"version":3,"file":"03-promises.00d6307c.js.map"}