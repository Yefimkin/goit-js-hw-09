{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,gBACnCC,UAAWF,SAASC,cAAc,eAClCE,YAAaH,SAASC,cAAc,iBACpCG,UAAWJ,SAASC,cAAc,WA8BpC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,CAAEN,SAAUA,EAAUC,MAAOA,IAErCM,EAAO,CAAEP,SAAUA,EAAUC,MAAOA,MAErCA,MArCPT,EAAKM,UAAUW,iBAAiB,SAEhC,SAAqBC,GACjBA,EAAMC,kBASV,UAA8BV,MAAAW,EAAKC,KAAEA,EAAIC,OAAEA,IACzC,IAAIC,EAAkBH,EACtB,IAAK,IAAII,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCjB,EAAciB,EAAGD,GACdE,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA5B,GAAS6B,OAAOC,QAAQ,qBAAqBpB,QAAeC,UAEjEoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBiB,EAAA5B,GAAS6B,OAAOG,QAAQ,oBAAoBtB,QAAeC,UAE3Dc,GAAmBF,EAbrBU,CALa,CACXtB,MAAOuB,SAAShC,EAAKC,WAAWgC,OAChCZ,KAAMW,SAAShC,EAAKI,UAAU6B,OAC9BX,OAAQU,SAAShC,EAAKK,YAAY4B","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayInput: document.querySelector('[name=delay]'),\n  stepInput: document.querySelector('[name=step]'),\n  amountInput: document.querySelector('[name=amount]'),\n  submitBtn: document.querySelector('button'),\n}\n\nrefs.submitBtn.addEventListener('click', onSubmitBtn);\n\nfunction onSubmitBtn(event) {\n    event.preventDefault();\n  const data = {\n    delay: parseInt(refs.delayInput.value),\n    step: parseInt(refs.stepInput.value),\n    amount: parseInt(refs.amountInput.value),\n  }\n  newPromiseCreation(data);\n}\n\nfunction newPromiseCreation({ delay, step, amount }) {\n  let calculatedDelay = delay;\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, calculatedDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  });\n    calculatedDelay += step;\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n    \n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","delayInput","document","querySelector","stepInput","amountInput","submitBtn","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","step","amount","calculatedDelay","i","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$newPromiseCreation","parseInt","value"],"version":3,"file":"03-promises.49b56dbf.js.map"}